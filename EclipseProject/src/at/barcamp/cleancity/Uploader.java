package at.barcamp.cleancity;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.json.JSONObject;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.drawable.Drawable;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;

public class Uploader extends Activity implements LocationListener{
	
	// path to image (generated by OS!)
	private String imageUrl;
	
	// controls..
	private Button picture;
	private EditText desc;
	private Button send;
	private Uri imageUri;
	private ImageView image;
	
	// error-flags
	private static final int TAKE_PICTURE = 0;
	
	// scale image to...
	private static final int width = 640;
	private static final int heigh = 480;
	
	LocationManager locationManager;
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        picture = (Button)findViewById(R.id.uploader_picture);
        send = (Button)findViewById(R.id.uploader_send); 
        desc = (EditText)findViewById(R.id.uploader_desc);
        image = (ImageView)findViewById(R.id.uploader_image);
        
        // set GPS...
        locationManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);
        Criteria c = new Criteria(); 
		c.setAccuracy(Criteria.ACCURACY_FINE); 
        String provider = locationManager.getBestProvider(c, true);
        locationManager.requestLocationUpdates(provider, 1000L, 500.0f, this);
		
        picture.setOnClickListener(new OnClickListener() {
			public void onClick(View arg0) {
				// open camera view here
				takePhoto(arg0);
			} 
        });
        
    }
   
    
    public void takePhoto(View view) {
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        File photo = new File(Environment.getExternalStorageDirectory(),  "Pic.jpg");
        imageUrl = photo.getAbsolutePath();
        intent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(photo));
        imageUri = Uri.fromFile(photo);
        startActivityForResult(intent, TAKE_PICTURE);
    }
    
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
        case TAKE_PICTURE :
            if (resultCode == Activity.RESULT_OK) {
                Uri selectedImage = imageUri;
                getContentResolver().notifyChange(selectedImage, null);
                
                Bitmap bitm = BitmapFactory.decodeFile(imageUrl);
                
                int origWidth = bitm.getWidth();
                int origHeight = bitm.getHeight();
                
                float scaleWidth = ((float) width) / origWidth;
                float scaleHeight = ((float) heigh) / origHeight;
                
                Matrix matrix = new Matrix();
                
                matrix.postScale(scaleWidth, scaleHeight);
                
                Bitmap resizedBitm = Bitmap.createBitmap(bitm,0,0,origWidth,origHeight,matrix,true);
                
                FileOutputStream out = null;
                try {
                	out = new FileOutputStream(imageUrl);
					resizedBitm.compress(Bitmap.CompressFormat.JPEG, 100, out);
				} catch (FileNotFoundException e) {
					Log.e("TAG", e.getMessage());
				} finally {
					try {
						out.close();
					} catch (IOException e) {
						Log.e("TAG", e.getMessage());
					}
				}
                
                //File f = new File(imageUri.toString());
                Drawable d = Drawable.createFromPath(imageUrl);
                image.setImageDrawable(d);
//                image.postInvalidate();
            }
        }
    }

	public void onLocationChanged(Location location) {
		if (location != null) {
			double dlat = location.getLatitude();
			double dlng = location.getLongitude();
//			int lat = (int) (location.getLatitude() * 1000000);
//			int lng = (int) (location.getLongitude() * 1000000);
			
			String test = "(" + dlat + " / " + dlng + ")";
	        desc.setText(test);
		}
	}

	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub
		
	}

	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub
		
	}

	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub
		
	}
}

